import React, { useState } from "react";
import * as Form from "@radix-ui/react-form";
import * as Checkbox from "@radix-ui/react-checkbox";
import { CheckIcon } from "@radix-ui/react-icons";

// 自定义样式 - 在实际项目中你需要添加自己的样式
// 这里使用内联样式仅用于演示
const styles = {
  wrapper: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    minHeight: "100vh",
    backgroundColor: "#f3f4f6",
    fontFamily: "sans-serif",
  },
  card: {
    width: "100%",
    maxWidth: "400px",
    backgroundColor: "white",
    borderRadius: "8px",
    boxShadow: "0 10px 15px -3px rgba(0, 0, 0, 0.1)",
    overflow: "hidden",
  },
  header: {
    padding: "24px",
  },
  title: {
    fontSize: "24px",
    fontWeight: "bold",
    textAlign: "center",
    color: "#111827",
    margin: 0,
  },
  description: {
    textAlign: "center",
    color: "#6b7280",
    marginTop: "8px",
  },
  content: {
    padding: "0 24px 24px",
  },
  errorMessage: {
    backgroundColor: "#fef2f2",
    color: "#b91c1c",
    padding: "12px",
    borderRadius: "4px",
    marginBottom: "16px",
    display: "flex",
    alignItems: "center",
  },
  errorIcon: {
    marginRight: "8px",
  },
  formField: {
    marginBottom: "16px",
  },
  label: {
    display: "block",
    fontSize: "14px",
    fontWeight: "500",
    color: "#374151",
    marginBottom: "4px",
  },
  input: {
    width: "100%",
    padding: "8px 12px",
    borderRadius: "4px",
    border: "1px solid #d1d5db",
    fontSize: "14px",
  },
  formMessage: {
    fontSize: "12px",
    color: "#b91c1c",
    marginTop: "2px",
  },
  forgotPassword: {
    fontSize: "14px",
    color: "#4f46e5",
    textDecoration: "none",
  },
  labelFlex: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
  },
  checkboxContainer: {
    display: "flex",
    alignItems: "center",
    marginTop: "12px",
  },
  checkbox: {
    width: "16px",
    height: "16px",
    backgroundColor: "white",
    border: "1px solid #d1d5db",
    borderRadius: "4px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    cursor: "pointer",
  },
  checkboxLabel: {
    marginLeft: "8px",
    fontSize: "14px",
    color: "#374151",
  },
  button: {
    width: "100%",
    padding: "8px 16px",
    backgroundColor: "#4f46e5",
    color: "white",
    border: "none",
    borderRadius: "4px",
    fontSize: "14px",
    fontWeight: "500",
    cursor: "pointer",
    marginTop: "16px",
  },
  buttonDisabled: {
    backgroundColor: "#6b7280",
    cursor: "not-allowed",
  },
  footer: {
    padding: "16px 24px",
    backgroundColor: "#f9fafb",
    borderTop: "1px solid #e5e7eb",
    textAlign: "center",
  },
  footerText: {
    fontSize: "14px",
    color: "#6b7280",
  },
  signUpLink: {
    color: "#4f46e5",
    textDecoration: "none",
    fontWeight: "500",
  },
};

const RadixLogin = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    
    if (!email || !password) {
      setError("请填写所有必填字段");
      return;
    }
    
    setLoading(true);
    
    // 模拟API调用
    try {
      // 这里通常会调用实际的登录API
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log("登录成功:", { email, password, rememberMe });
      // 成功后的操作，例如重定向
    } catch (err) {
      setError("用户名或密码错误");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={styles.wrapper}>
      <div style={styles.card}>
        <div style={styles.header}>
          <h2 style={styles.title}>欢迎登录</h2>
          <p style={styles.description}>请输入您的账号密码登录系统</p>
        </div>
        
        <div style={styles.content}>
          {error && (
            <div style={styles.errorMessage}>
              <svg 
                style={styles.errorIcon}
                width="16" 
                height="16" 
                viewBox="0 0 16 16" 
                fill="none" 
                xmlns="http://www.w3.org/2000/svg"
              >
                <path 
                  d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm0-2a6 6 0 1 1 0-12 6 6 0 0 1 0 12z" 
                  fill="#b91c1c" 
                />
                <path d="M7 4h2v5H7V4zm0 6h2v2H7v-2z" fill="#b91c1c" />
              </svg>
              <span>{error}</span>
            </div>
          )}
          
          <Form.Root onSubmit={handleSubmit}>
            <Form.Field name="email" style={styles.formField}>
              <div style={styles.label}>
                <Form.Label>邮箱</Form.Label>
              </div>
              <Form.Control asChild>
                <input
                  type="email"
                  required
                  placeholder="请输入邮箱"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  style={styles.input}
                />
              </Form.Control>
              <Form.Message match="valueMissing" style={styles.formMessage}>
                请输入邮箱
              </Form.Message>
              <Form.Message match="typeMismatch" style={styles.formMessage}>
                请输入有效的邮箱地址
              </Form.Message>
            </Form.Field>
            
            <Form.Field name="password" style={styles.formField}>
              <div style={styles.labelFlex}>
                <Form.Label style={styles.label}>密码</Form.Label>
                <a href="#" style={styles.forgotPassword}>忘记密码?</a>
              </div>
              <Form.Control asChild>
                <input
                  type="password"
                  required
                  placeholder="请输入密码"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  style={styles.input}
                />
              </Form.Control>
              <Form.Message match="valueMissing" style={styles.formMessage}>
                请输入密码
              </Form.Message>
            </Form.Field>
            
            <div style={styles.checkboxContainer}>
              <Checkbox.Root 
                checked={rememberMe}
                onCheckedChange={setRememberMe}
                id="rememberMe"
                style={styles.checkbox}
              >
                {rememberMe && <CheckIcon />}
              </Checkbox.Root>
              <label htmlFor="rememberMe" style={styles.checkboxLabel}>
                记住我
              </label>
            </div>
            
            <Form.Submit asChild>
              <button 
                style={{
                  ...styles.button,
                  ...(loading ? styles.buttonDisabled : {})
                }}
                disabled={loading}
              >
                {loading ? "登录中..." : "登录"}
              </button>
            </Form.Submit>
          </Form.Root>
        </div>
        
        <div style={styles.footer}>
          <p style={styles.footerText}>
            还没有账号?{" "}
            <a href="#" style={styles.signUpLink}>
              立即注册
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export default RadixLogin;
